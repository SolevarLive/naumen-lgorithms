package ru.naumen.collection.task1;

import java.util.HashMap;
import java.util.Map;

/**
 * Дано:
 * <pre>
 * public class Ticket {
 *     private long id;
 *     private String client;
 *     …
 * }</pre>
 * <p>Разработать программу для бармена в холле огромного концертного зала.
 * Зрители в кассе покупают билет (класс Ticket), на котором указан идентификатор билета (id) и имя зрителя.
 * При этом, есть возможность докупить наборы разных товаров (комбо-обед): нет товаров, напитки, еда и напитки.
 * Доп. услуги оформляются через интернет и привязываются к билету, но хранятся отдельно от билета
 * (нельзя добавить товары в класс Ticket).</p>
 * <p>Бармен сканирует билет и получает объект Ticket. По этому объекту нужно уметь
 * находить необходимые товары по номеру билета. И делать это нужно очень быстро,
 * ведь нужно как можно быстрее всех накормить.</p>
 * <p>
 * См. {@link Ticket}
 *
 * @author vpyzhyanov
 * @since 19.10.2023
 */
public class Task1 {
    public enum Goods {
        /**
         * нет товаров
         */
        EMPTY,
        /**
         * напитки
         */
        DRINKS,
        /**
         * еда и напитки
         */
        FOOD_AND_DRINKS
    }

    // Используем HashMap для хранения соответствия между билетами и товарами
    // 1. Быстрый доступ к данным: O(1) в среднем
    // 2. Позволяет использовать объект Ticket в качестве ключа, что удобно для поиска товаров по билету.
    // 3. Хранит пары "ключ-значение", что идеально подходит для данной задачи.
    //Сложность: O(1)
    //Создание нового объекта HashMap не требует обработки данных, и поэтому занимает постоянное время.
    private Map<Ticket, Goods> ticketGoodsMap;

    public Task1() {
        ticketGoodsMap = new HashMap<>();
    }

    /**
     * Получить товары по билету
     * <p>Сложность алгоритма O(1)</p>
     *
     * <p><b>Мы не забыли определить equals и hashcode у класса {@link Ticket}</b></p>
     * <p>Достаточно их определить только для id, т.к. он уникален</p>
     */

    //Сложность: O(1)
    //При использовании хеш-таблицы для хранения данных, поиск элемента по ключу (хеш-коду) выполняется за O(1)
    // Это происходит потому, что хеш-код ключа используется для вычисления индекса в массиве, где хранится значение.
    public Goods getGoods(Ticket ticket) {
        // Метод getOrDefault возвращает значение по ключу или значение по умолчанию (Goods.EMPTY),
        // если ключ не найден. Сложность O(1) благодаря использованию HashMap.
        return ticketGoodsMap.getOrDefault(ticket, Goods.EMPTY);
    }


    //Общая сложность O(1)
}